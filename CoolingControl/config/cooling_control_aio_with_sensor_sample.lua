-- DO NOT EDIT THIS FILE
-- This file is automatically overwritten by the installer
-- Control script for AIO cooling system with coolant sensor

local cf = require("config/cooling_functions")

function on_resume()
    cf.on_resume()
end

-- AIO coolant target temperature, adjust as needed
local aio_coolant_target_temp = 40

-- AIO fan and pump RPM limits (not absolute limits), adjust as needed based on your AIO and how silent you want it to be
local min_aio_pump_rpm = 1700
local max_aio_pump_rpm = 2800
local min_aio_fan_rpm = 600
local max_aio_fan_rpm = 1800

-- Idle / browsing CPU power, adjust based on your system
local idle_cpu_power = 50
-- Max CPU power where we want max cooling, adjust based on your CPU
local max_cpu_power = 253

-- Idle / browsing GPU power, adjust based on your system
local idle_gpu_power = 40
-- Max GPU power, adjust based on your GPU
local max_gpu_power = 220

-- Case fan limits
local min_case_fan_rpm = 600
local max_case_fan_rpm = 1000

-- Case fan curve based on gpu power (example, adjust as needed)
local case_gpu_fan_curve =  { { sensor_value = idle_gpu_power, control_value = min_case_fan_rpm }, { sensor_value = max_gpu_power, control_value = max_case_fan_rpm } } 

function calculate_controls(sensors)
    local result = {}

    local cpu_power = sensors["CPU Power"] or idle_cpu_power
    local cpu_temp = sensors["CPU Package"] or 50
    local coolant_temp = sensors["T Sensor"] or 40

    -- Apply moving average
    cpu_power = cf.apply_ema("CPU Power", cpu_power)
    cpu_temp = cf.apply_ema("CPU Package", cpu_temp)

    -- Calc AIO control
    local aio_pump_rpm = cf.aio_pump_control(cpu_temp, cpu_power, idle_cpu_power, max_cpu_power, min_aio_pump_rpm, max_aio_pump_rpm)
    local aio_fan_rpm = cf.aio_fan_pid_control("T Sensor", coolant_temp, 40, min_aio_fan_rpm, max_aio_fan_rpm)  
    
    -- Apply hysteresis based on CPU power only for pump
    aio_pump_rpm = cf.apply_hysteresis("AIO Pump", aio_pump_rpm, cpu_power, idle_cpu_power, max_cpu_power, 5, 15)

    table.insert(result, { alias = "AIO Pump", rpm = aio_pump_rpm })
    table.insert(result, { alias = "AIO Fan", rpm = aio_fan_rpm })

    -- Case fan: Based on GPU power mixed with AIO fan
    local gpu_power = sensors["GPU Power"] or idle_gpu_power

    -- Apply moving average
    gpu_power = cf.apply_ema("GPU Power", gpu_power)

    -- Apply fan curve
    local case_fan_rpm = cf.apply_linear_curve(gpu_power, case_gpu_fan_curve)

    -- Apply hysteresis based on GPU power
    case_fan_rpm = cf.apply_hysteresis("Case Fan", case_fan_rpm, gpu_power, idle_gpu_power, max_gpu_power, 5, 15)

    -- Mix with AIO fan
    case_fan_rpm = math.min(max_case_fan_rpm, math.max(aio_fan_rpm * 0.6, case_fan_rpm))
    
    table.insert(result, { alias = "Case Fan", rpm = case_fan_rpm })
  
    return result
end