-- DO NOT EDIT THIS FILE
-- This file is automatically overwritten by the installer
-- Control script for AIO cooling system

local cf = require("config/cooling_functions")

-- Fan configuration (example, adjust as needed)
local case_gpu_fan_curve =  { { sensor_value = 80, control_value = 600 }, { sensor_value = 90, control_value = 1200 } } 

function on_resume()
    cf.on_resume()
end

function calculate_controls(sensors)
    local result = {}

    local cpu_power = sensors["CPU Power"] or 50
    
    -- Apply moving avarage
    cpu_power = cf.apply_ema("CPU Power", cpu_power)
    -- log_debug(string.format("EMA CPU Power %f",  cpu_power))
    
    -- Calc AIO control, silent profile: max fan rpm 1700, max pump rpm 2800
    local aio_res = cf.aio_control(cpu_power, 50, 253, 1700, 2800, 680, 1500)
    -- local aio_res = cf.aio_control(cpu_power, 50, 300, 1700, 3342, 680, 2000)
    local aio_pump_rpm = aio_res.pump_rpm
    local aio_fan_rpm = aio_res.fan_rpm
    -- log_debug(string.format("AIO Pump RPM %f AIO Fan RPM %f",  aio_pump_rpm, aio_fan_rpm))
    
    -- Apply hysteresis
    aio_pump_rpm = cf.apply_hysteresis("AIO Pump", aio_pump_rpm, cpu_power, 50, 253, 5, 20)
    aio_fan_rpm = cf.apply_hysteresis("AIO Fan", aio_fan_rpm, cpu_power, 50, 253, 5, 20)
    -- log_debug(string.format("Post Hyst AIO Pump RPM %f AIO Fan RPM %f",  aio_pump_rpm, aio_fan_rpm))

    table.insert(result, { alias = "AIO Pump", rpm = aio_pump_rpm })
    table.insert(result, { alias = "AIO Fan", rpm = aio_fan_rpm })  
    
    -- Case fan: Based on GPU temperature
    local gpu_temp = sensors["GPU Core"] or 50

    -- Apply moving avarage
    gpu_temp = cf.apply_ema("GPU Core", gpu_temp)

    -- Apply fan curve
    local case_fan_rpm = cf.apply_linear_curve(gpu_temp, case_gpu_fan_curve)
    -- log_debug(string.format("Case Fan RPM: %f", case_fan_rpm))

    -- Apply hysteresis
    case_fan_rpm = cf.apply_hysteresis("Case Fan", case_fan_rpm, gpu_temp, 50, 100, 4, 2)
    -- log_debug(string.format("Post Hyst Case Fan RPM: %f", case_fan_rpm))

    -- Mix with AIO fan 
    case_fan_rpm = math.max(aio_fan_rpm * 0.8, case_fan_rpm)
    -- Limit to 1200 RPM
    case_fan_rpm = math.min(case_fan_rpm, 1200)
    -- log_debug(string.format("Mixed Case Fan RPM: %f", case_fan_rpm))
    
    table.insert(result, { alias = "Case Fan", rpm = case_fan_rpm })

    return result
end